{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"解决百度云大文件下载限制","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["http://pan.baidu.com/*","https://pan.baidu.com/*","http://yun.baidu.com/*","https://yun.baidu.com/*","https://eyun.baidu.com/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1509007134467},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/17800-%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E4%BA%91%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%99%90%E5%88%B6/code/%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E4%BA%91%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%99%90%E5%88%B6.user.js","uuid":"30b32b96-1820-41b8-b3a0-e1c70d752c9b","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDop6PlhrPnmb7luqbkupHlpKfmlofku7bkuIvovb3pmZDliLYKLy8gQG5hbWVzcGFjZSAgICB1bmRlZmluZWQKLy8gQHZlcnNpb24gICAgICAwLjAuNgovLyBAZGVzY3JpcHRpb24gIOS4gOihjOS7o+egge+8jOino+WGs+eZvuW6puS6keWkp+aWh+S7tuS4i+i9vemZkOWItgovLyBAYXV0aG9yICAgICAgIGZ1bmlhbnd1eGluCi8vIEBtYXRjaCAgICAgICAgaHR0cDovL3Bhbi5iYWlkdS5jb20vKgovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vcGFuLmJhaWR1LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgaHR0cDovL3l1bi5iYWlkdS5jb20vKgovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8veXVuLmJhaWR1LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9leXVuLmJhaWR1LmNvbS8qCi8vIEBydW4tYXQgICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQovKiBqc2hpbnQgLVcwOTcgKi8KJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5nZXRQcm90b3R5cGVPZihuYXZpZ2F0b3IpLCdwbGF0Zm9ybScse2dldDpmdW5jdGlvbigpe3JldHVybiAnc2JfYmFpZHUnO319KQoKCihmdW5jdGlvbigpewp2YXIgaHJlZj1sb2NhdGlvbi5ocmVmOwovaHR0cDovLnRlc3QoaHJlZik/bG9jYXRpb24uaHJlZj0naHR0cHMnK2hyZWYuc2xpY2UoNCk6MDsKfSgpKTsKCgogICAg"},{"name":"百度网盘直接下载助手","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://pan.baidu.com/disk/home*","*://yun.baidu.com/disk/home*","*://pan.baidu.com/s/*","*://yun.baidu.com/s/*","*://pan.baidu.com/share/link*","*://yun.baidu.com/share/link*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1509007134475},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/31921-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B/code/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B.user.js","uuid":"8ca9001b-7e8a-486e-87c7-67af79d4cdd6","source":""},{"name":"baidu-music-download","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://music.baidu.com/song/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":["tingapi.ting.baidu.com","yinyueyun.baidu.com"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1509007134479},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/3953-baidu-music-download/code/baidu-music-download.user.js","uuid":"16541415-3325-45d1-a74a-2217568d5dbb","source":""},{"name":"CNKI 中国知网 PDF 全文下载（特制版）","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["http://image.cnki.net/*"],"orig_includes":["http://*.cnki.net/*","http://*.cnki.net.*/*","*/kns/brief/*","*/kns55/brief/*","*/grid2008/brief/*","*/detail/detail.aspx*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1509007134482},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/18842-cnki-%E4%B8%AD%E5%9B%BD%E7%9F%A5%E7%BD%91-pdf-%E5%85%A8%E6%96%87%E4%B8%8B%E8%BD%BD-%E7%89%B9%E5%88%B6%E7%89%88/code/CNKI%20%E4%B8%AD%E5%9B%BD%E7%9F%A5%E7%BD%91%20PDF%20%E5%85%A8%E6%96%87%E4%B8%8B%E8%BD%BD%EF%BC%88%E7%89%B9%E5%88%B6%E7%89%88%EF%BC%89.user.js","uuid":"73371c6c-1727-46b4-913b-15c16d11fa39","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQGlkICAgICAgICAgICAgIENOS0ktUERGLVNwZWNpYWwKLy8gQG5hbWUgICAgICAgICAgIENOS0kg5Lit5Zu955+l572RIFBERiDlhajmlofkuIvovb3vvIjnibnliLbniYjvvIkKLy8gQHZlcnNpb24gICAgICAgIDMuMi4wLjIwMTcwMjEwCi8vIEBuYW1lc3BhY2UgICAgICBodHRwOi8veXVlbG9uZy5pbmZvCi8vIEBhdXRob3IgICAgICAgICBZVUUgTG9uZwovLyBAZGVzY3JpcHRpb24gICAg5Y+C6KeBIGh0dHA6Ly9ibG9nLnl1ZWxvbmcuaW5mby9wb3N0L2Nua2ktcGRmLWpzLmh0bWwKLy8gQGluY2x1ZGUgICAgICAgIGh0dHA6Ly8qLmNua2kubmV0LyoKLy8gQGluY2x1ZGUgICAgICAgIGh0dHA6Ly8qLmNua2kubmV0LiovKgovLyBAZXhjbHVkZSAgICAgICAgaHR0cDovL2ltYWdlLmNua2kubmV0LyoKLy8gQGluY2x1ZGUgICAgICAgICova25zL2JyaWVmLyoKLy8gQGluY2x1ZGUgICAgICAgICova25zNTUvYnJpZWYvKgovLyBAaW5jbHVkZSAgICAgICAgKi9ncmlkMjAwOC9icmllZi8qCi8vIEBpbmNsdWRlICAgICAgICAqL2RldGFpbC9kZXRhaWwuYXNweCoKLy8gQHJ1bi1hdCAgICAgICAgIGRvY3VtZW50LWlkbGUKLy8gQGdyYW50ICAgICAgICAgIG5vbmUKLy8gQHN1cHBvcnRVUkwgICAgIGh0dHA6Ly9ibG9nLnl1ZWxvbmcuaW5mby9wb3N0L2Nua2ktcGRmLWpzLmh0bWwKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgYWxsTGlzLCB0aGlzTGksIG5ld0xpLCBhUERGLCBiUERGLCBhbGxMaW5rcywgdGhpc0xpbmssIHBhZ2VUeXBlLCBwZlR5cGUsIG15dXJsLCBpOwp2YXIgcGFnZVR5cGUgPSB0cnVlOwp2YXIgcGZUeXBlID0gdHJ1ZTsKdmFyIG15dXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CgphbGxMaW5rcyA9IGRvY3VtZW50LmV2YWx1YXRlKAogICAgJy8vYVtAaHJlZl0nLAogICAgZG9jdW1lbnQsCiAgICBudWxsLAogICAgWFBhdGhSZXN1bHQuVU5PUkRFUkVEX05PREVfU05BUFNIT1RfVFlQRSwKICAgIG51bGwpOwoKYWxsTGlzID0gZG9jdW1lbnQuZXZhbHVhdGUoCiAgICAiLy9saVtAY2xhc3NdIiwKICAgIGRvY3VtZW50LAogICAgbnVsbCwKICAgIFhQYXRoUmVzdWx0LlVOT1JERVJFRF9OT0RFX1NOQVBTSE9UX1RZUEUsCiAgICBudWxsKTsKCmlmIChteXVybC5pbmRleE9mKCJkZXRhaWwuYXNweCIpICE9IC0xKSB7CiAgICBwYWdlVHlwZSA9IGZhbHNlOwp9IC8vZmFsc2Ug5Li66K+m5oOF6aG16Z2iCmlmIChkb2N1bWVudC50aXRsZS5pbmRleE9mKCIgLSDkuK3lm73nn6XnvZEiKSAhPSAtMSkgewogICAgcGZUeXBlID0gZmFsc2U7Cn0gLy9mYWxzZSDkuLrmlrDlubPlj7AKCmlmICgocGZUeXBlID09PSB0cnVlKSAmIChwYWdlVHlwZSA9PT0gZmFsc2UpKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbExpcy5zbmFwc2hvdExlbmd0aDsgaSsrKSB7CiAgICAgICAgdGhpc0xpID0gYWxsTGlzLnNuYXBzaG90SXRlbShpKTsKICAgICAgICBpZiAodGhpc0xpLmdldEF0dHJpYnV0ZSgiY2xhc3MiKS5pbmRleE9mKCJyZWFkb2wiKSAhPSAtMSkgewogICAgICAgICAgICBuZXdMaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICAgICAgICAgIG5ld0xpLnNldEF0dHJpYnV0ZSgiY2xhc3MiLCAicGRmIik7CiAgICAgICAgICAgIGFQREYgPSAnPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9IicgKyB0aGlzTGkuZmlyc3RDaGlsZC5ocmVmLnJlcGxhY2UoIiZkZmxhZz1yZWFkb25saW5lIiwgIiZkZmxhZz1wZGZkb3duIikgKyAnIj5QREbkuIvovb08L2E+JzsKICAgICAgICAgICAgbmV3TGkuaW5uZXJIVE1MID0gYVBERjsKICAgICAgICAgICAgdGhpc0xpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0xpLCB0aGlzTGkubmV4dFNpYmxpbmcpOwogICAgICAgIH0KICAgIH0KfQoKaWYgKChwZlR5cGUgPT09IGZhbHNlKSAmIChwYWdlVHlwZSA9PT0gZmFsc2UpKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbExpbmtzLnNuYXBzaG90TGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzTGluayA9IGFsbExpbmtzLnNuYXBzaG90SXRlbShpKTsKICAgICAgICBpZiAodGhpc0xpbmsuaHJlZiAmJiB0aGlzTGluay5ocmVmLmluZGV4T2YoImRvd25sb2FkLmFzcHg/ZmlsZW5hbWU9IikgIT0gLTEgJiYgdGhpc0xpbmsuaW5uZXJIVE1MLmluZGV4T2YoIuaVtOacrCIpICE9IC0xKSB7CiAgICAgICAgICAgIHRoaXNMaW5rLmlubmVySFRNTCA9IHRoaXNMaW5rLmlubmVySFRNTC5yZXBsYWNlKCLmlbTmnKwiLCAiQ0FKIik7CiAgICAgICAgICAgIGJQREYgPSB0aGlzTGluay5ocmVmOwogICAgICAgIH0KICAgICAgICBpZiAodGhpc0xpbmsuaHJlZiAmJiB0aGlzTGluay5ocmVmLmluZGV4T2YoImRvd25sb2FkLmFzcHg/ZmlsZW5hbWU9IikgIT0gLTEgJiYgdGhpc0xpbmsuaW5uZXJIVE1MLmluZGV4T2YoIuWIhumhtSIpICE9IC0xKSB7CiAgICAgICAgICAgIHRoaXNMaW5rLmlubmVySFRNTCA9IHRoaXNMaW5rLmlubmVySFRNTC5yZXBsYWNlKCLliIbpobUiLCAiUERGIik7CiAgICAgICAgICAgIHRoaXNMaW5rLmhyZWYgPSBiUERGLnJlcGxhY2UoIm5oZG93biIsICJwZGZkb3duIik7CiAgICAgICAgfQogICAgfQp9CgppZiAocGFnZVR5cGUgPT09IHRydWUpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsTGlua3Muc25hcHNob3RMZW5ndGg7IGkrKykgewogICAgICAgIHRoaXNMaW5rID0gYWxsTGlua3Muc25hcHNob3RJdGVtKGkpOwogICAgICAgIGlmICh0aGlzTGluay5ocmVmICYmIHRoaXNMaW5rLmhyZWYuaW5kZXhPZigiZG93bmxvYWQuYXNweD9maWxlbmFtZT0iKSAhPSAtMSAmJiB0aGlzTGluay5ocmVmLmluZGV4T2YoIiZkZmxhZyIpID09IC0xKSB7CiAgICAgICAgICAgIHRoaXNMaW5rLmhyZWYgPSB0aGlzTGluay5ocmVmICsgIiZkZmxhZz1wZGZkb3duIjsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXNMaW5rLmhyZWYgJiYgdGhpc0xpbmsuaHJlZi5pbmRleE9mKCJkb3dubG9hZC5hc3B4P2ZpbGVuYW1lPSIpICE9IC0xICYmIHRoaXNMaW5rLmhyZWYuaW5kZXhPZigiJmRmbGFnPW5oZG93biIpICE9IC0xKSB7CiAgICAgICAgICAgIHRoaXNMaW5rLmhyZWYgPSB0aGlzTGluay5ocmVmLnJlcGxhY2UoIm5oZG93biIsICJwZGZkb3duIik7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzTGluay5ocmVmICYmIHRoaXNMaW5rLmhyZWYuaW5kZXhPZigiZG93bmxvYWQuYXNweD9maWxlbmFtZT0iKSAhPSAtMSAmJiB0aGlzTGluay5ocmVmLmluZGV4T2YoIiZkZmxhZz1wZGZkb3duIikgIT0gLTEgJiYgKHRoaXNMaW5rLmhyZWYuaW5kZXhPZigiPUNNRkQiKSAhPSAtMSB8fCB0aGlzTGluay5ocmVmLmluZGV4T2YoIj1DREZEIikgIT0gLTEgKSkgewogICAgICAgICAgICB0aGlzTGluay5ocmVmID0gdGhpc0xpbmsuaHJlZi5yZXBsYWNlKCJwZGZkb3duIiwgIm5oZG93biIpOwogICAgICAgIH0KICAgIH0KfQ=="},{"name":"破解VIP会员视频集合","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://*.bilibili.com/blackboard/*"],"orig_includes":[],"orig_matches":["*://*.iqiyi.com/*","*://*.youku.com/*","*://*.le.com/*","*://*.letv.com/*","*://v.qq.com/*","*://*.tudou.com/*","*://*.mgtv.com/*","*://film.sohu.com/*","*://tv.sohu.com/*","*://*.acfun.cn/v/*","*://*.bilibili.com/*","*://vip.1905.com/play/*","*://*.pptv.com/*","*://v.yinyuetai.com/video/*","*://v.yinyuetai.com/playlist/*","*://*.fun.tv/vplay/*","*://*.wasu.cn/Play/show/*","*://*.56.com/*"],"orig_noframes":true,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"userApis":"o[{}]","userApisOn":"bfalse"},"ts":1510192738131},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/27530-%E7%A0%B4%E8%A7%A3vip%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88/code/%E7%A0%B4%E8%A7%A3VIP%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88.user.js","uuid":"ec45a3a1-952c-4eb0-a6a0-07499ddd5555","source":""},{"name":"视频站启用html5播放器","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*://pan.baidu.com/*","*://yun.baidu.com/*","*://v.qq.com/*","*://v.sports.qq.com/*","*://film.qq.com/*","*://view.inews.qq.com/*","*://news.qq.com/*","https://www.weiyun.com/video_*","*://v.youku.com/v_show/id_*","*://*.tudou.com/v/*","*://www.bilibili.com/*","*://v.163.com/*.html*","*://ent.163.com/*.html*","*://news.163.com/*.html*","*://news.163.com/special/*","*://study.163.com/course/*.htm?courseId=*","*://news.sina.com.cn/*","*://video.sina.com.cn/*","*://video.sina.cn/*","*://weibo.com/*","*://*.weibo.com/*","*://*.le.com/*.html*","*://*.lesports.com/*.html*","*://tv.sohu.com/*.shtml*","*://*.tv.sohu.com/*.shtml*","*://film.sohu.com/album/*","*://www.fun.tv/vplay/*","*://m.fun.tv/*","*://www.yy.com/*","*://www.huya.com/*","https://www.douyu.com/*","https://www.panda.tv/*","*://star.longzhu.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1509007134491},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/30545-%E8%A7%86%E9%A2%91%E7%AB%99%E5%90%AF%E7%94%A8html5%E6%92%AD%E6%94%BE%E5%99%A8/code/%E8%A7%86%E9%A2%91%E7%AB%99%E5%90%AF%E7%94%A8html5%E6%92%AD%E6%94%BE%E5%99%A8.user.js","uuid":"1020d160-f53f-4295-a374-f47cebdd3de7","source":""},{"name":"AC-baidu： 优化百度、搜狗、谷歌搜索结果之重定向去除+去广告+favicon","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["*"],"orig_excludes":[],"orig_includes":["*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":["www.baidu.com","winedt.com","*"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"AdsStyleMode_Baidu":"s0","AdsStyleMode_Google":"s0","HightLightColorList":"o[\"#FFFF80\",\"#90EE90\",\"#33FFFF\",\"#FF6600\",\"#FF69B4\",\"#20B2AA\",\"#8470FF\"]","defaultFaviconUrl":"shttps://ws1.sinaimg.cn/large/6a155794ly1foijtdzhxhj200w00wjr5.jpg","doDisableSug":"btrue","isALineEnable":"bfalse","isAdsEnable":"btrue","isCounterEnable":"bfalse","isFaviconEnable":"btrue","isHighLightEnable":"bfalse","isRedirectEnable":"btrue","isRightDisplayEnable":"btrue","version":"s16.5"},"ts":1527096430015},"enabled":true,"position":7,"file_url":"https://greasyfork.org/scripts/14178-ac-baidu-%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6-%E6%90%9C%E7%8B%97-%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E4%B9%8B%E9%87%8D%E5%AE%9A%E5%90%91%E5%8E%BB%E9%99%A4-%E5%8E%BB%E5%B9%BF%E5%91%8A-favicon/code/AC-baidu%EF%BC%9A%20%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E3%80%81%E6%90%9C%E7%8B%97%E3%80%81%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E4%B9%8B%E9%87%8D%E5%AE%9A%E5%90%91%E5%8E%BB%E9%99%A4+%E5%8E%BB%E5%B9%BF%E5%91%8A+favicon.user.js","uuid":"0bae6029-34e6-4e1e-b202-1e1f79b4f715","source":""},{"name":"Download Youtube videos and subtitles","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["http://www.youtube.com/embed/*","https://www.youtube.com/embed/*"],"orig_includes":["http://www.youtube.com/*","https://www.youtube.com/*"],"orig_matches":["http://www.youtube.com/*","https://www.youtube.com/*","http://s.ytimg.com/yts/jsbin/html5player*","https://s.ytimg.com/yts/jsbin/html5player*","http://manifest.googlevideo.com/*","https://manifest.googlevideo.com/*","http://*.googlevideo.com/videoplayback*","https://*.googlevideo.com/videoplayback*","http://*.youtube.com/videoplayback*","https://*.youtube.com/videoplayback*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1511228579293,"data":{}},"enabled":false,"position":8,"file_url":"https://greasyfork.org/scripts/8426-download-youtube-videos-and-subtitles/code/Download%20Youtube%20videos%20and%20subtitles.user.js","uuid":"9b5d999b-13ea-4850-9414-1030dab62fc3","source":""},{"name":"网页限制解除","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1513351712334,"data":{}},"enabled":true,"position":9,"file_url":"https://greasyfork.org/scripts/14146-%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4/code/%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4.user.js","uuid":"48bf620a-3c2b-481e-9cd8-e5e9f16b68f3","source":""},{"name":"Userscript+ : Show Site All UserJS","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["cdn.bootcss.com","raw.githubusercontent.com","gist.githubusercontent.com","greasyfork.org"],"orig_excludes":["http://www.dev/Show-Site-All-UserJS/ui.html"],"orig_includes":["*"],"orig_matches":[],"orig_noframes":true,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1513352248493,"data":{}},"enabled":false,"position":10,"file_url":"https://greasyfork.org/scripts/24508-userscript-show-site-all-userjs/code/Userscript+%20:%20Show%20Site%20All%20UserJS.user.js","uuid":"c51c478d-4bde-4bfe-ae0a-81b6fbf70829","source":""},{"name":"Direct download from Google Play","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://play.google.com/*","http://play.google.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1513352452644,"data":{}},"enabled":true,"position":11,"file_url":"https://greasyfork.org/scripts/33005-direct-download-from-google-play/code/Direct%20download%20from%20Google%20Play.user.js","uuid":"4a4af82f-54a4-4e51-bf7c-68b4b3740606","source":""},{"name":"Feedly Full Feed","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://feedly.com/*","https://feedly.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":["wedata.net","urls.api.twitter.com","www.solidot.org","cn.engadget.com"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1513352691384,"data":{}},"enabled":true,"position":12,"file_url":"https://greasyfork.org/scripts/896-feedly-full-feed/code/Feedly%20Full%20Feed.user.js","uuid":"114e2a35-ca38-4dfc-a6eb-57b8e0292302","source":""},{"name":"QQ音乐付费音乐流畅版本下载","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://y.qq.com/portal/player.html"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1521729340197,"data":{}},"enabled":true,"position":13,"file_url":"https://greasyfork.org/scripts/28082-qq%E9%9F%B3%E4%B9%90%E4%BB%98%E8%B4%B9%E9%9F%B3%E4%B9%90%E6%B5%81%E7%95%85%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/code/QQ%E9%9F%B3%E4%B9%90%E4%BB%98%E8%B4%B9%E9%9F%B3%E4%B9%90%E6%B5%81%E7%95%85%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD.user.js","uuid":"1652d523-677c-4d0e-81ee-4ffdc17335ef","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBRUemfs+S5kOS7mOi0uemfs+S5kOa1geeVheeJiOacrOS4i+i9vQovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly90YW1wZXJtb25rZXkubmV0LwovLyBAdmVyc2lvbiAgICAgIDAuMQovLyBAZGVzY3JpcHRpb24gIOWGjeaUtui0ueatjOabsuWQrOatjOmhtemdouacieS4que6r+WHgOS4i+i9vQovLyBAYXV0aG9yICAgICAgIOa1t+e7teWuneWunQovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8veS5xcS5jb20vcG9ydGFsL3BsYXllci5odG1sCi8vIEByZXF1aXJlICAgICAgIGh0dHA6Ly9jZG4uYm9vdGNzcy5jb20vanF1ZXJ5LzEuMTEuMS9qcXVlcnkubWluLmpzCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKICAgICd1c2Ugc3RyaWN0JzsKICAgIHZhciBrPXt9OwogICAgZnVuY3Rpb24gcCgpCiAgICB7CiAgICAgICAgdmFyIHVybD0kKCJzb3VyY2UiKS5hdHRyKCJzcmMiKTsKICAgICAgICAkKCJkaXZbY2xhc3M9J21vZF9zb25nbGlzdF90b29sYmFyJ10iKS5hcHBlbmQoJzxhIGhyZWY9IicrdXJsKyciIGNsYXNzPSJtb2RfYnRuIiBkb3dubG9hZD0i6Zeo56WocCI+PGkgY2xhc3M9Im1vZF9idG5fZ3JlZW5fX2ljb25fZG93biI+PC9pPue6r+WHgOS4i+i9vTxzcGFuIGNsYXNzPSJtb2RfYnRuX19ib3JkZXIiPjwvc3Bhbj48L2E+Jyk7CiAgICB9CiAgICBrPWZ1bmN0aW9uKCkKICAgIHsKICAgICAgICB2YXIgeT0kKCIjaDVhdWRpb19tZWRpYSIpLnRleHQoKTsKICAgICAgICBpZigheSkKICAgICAgICB7CiAgICAgICAgICAgIHZhciB0PWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJhIik7Ly8uY2xpY2soKTsKICAgICAgICAgICAgZm9yKHZhciBoPTA7IGg8dC5sZW5ndGg7aCsrKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZih0W2hdLmdldEF0dHJpYnV0ZSgiaWQiKT09ImJ0bnBsYXkiKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHRbaF0uY2xpY2soKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBzZXRUaW1lb3V0KHAsMzAwMCk7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7YWxlcnQoeSk7fQogICAgfTsKICAgIHNldFRpbWVvdXQoaywyMDAwKTsKICAgIC8vIFlvdXIgY29kZSBoZXJlLi4uCn0pKCk7"},{"name":"YouTube Downloader - By Wígny Almeida","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http*://*.youtube.com/*","http*://youtube.com/*","http*://*.youtu.be/*","http*://youtu.be/*"],"orig_matches":["https://www.youtube.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1524535342604,"data":{}},"enabled":true,"position":14,"file_url":"https://greasyfork.org/scripts/35777-youtube-downloader-by-w%C3%ADgny-almeida/code/YouTube%20Downloader%20-%20By%20W%C3%ADgny%20Almeida.user.js","uuid":"fdaf9a75-ee69-4aad-a60f-46f43d4daf16","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBZb3VUdWJlIERvd25sb2FkZXIgLSBCeSBXw61nbnkgQWxtZWlkYQovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly90YW1wZXJtb25rZXkubmV0LwovLyBAY29weXJpZ2h0ICAgIFfDrWdueSBBbG1laWRhIHwgd2lnbnkuZ2l0aHViLmlvCi8vIEBob21lcGFnZVVSTCAgaHR0cHM6Ly9nb28uZ2wvcWtUV3ZHCi8vIEB2ZXJzaW9uICAgICAgMi40LjUKLy8gQGRlc2NyaXB0aW9uICBEb3dubG9hZCBBdWRpbyBhbmQgVmlkZW8gZnJvbSBZb3V0dWJlCi8vIEBhdXRob3IgICAgICAgV8OtZ255IEFsbWVpZGEKLy8gQGRhdGUgICAgICAgICAxMS0yOS0yMDE3Ci8vIEBsaWNlbnNlICAgICAgQ0MgQlktTkMtU0EgNC4wCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly93d3cueW91dHViZS5jb20vKgovLyBAaW5jbHVkZSAgICAgIGh0dHAqOi8vKi55b3V0dWJlLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgaHR0cCo6Ly95b3V0dWJlLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgaHR0cCo6Ly8qLnlvdXR1LmJlLyoKLy8gQGluY2x1ZGUgICAgICBodHRwKjovL3lvdXR1LmJlLyoKLy8gQHJlcXVpcmUgICAgICBodHRwczovL2NvZGUuanF1ZXJ5LmNvbS9qcXVlcnktMy4yLjEubWluLmpzCi8vIEBpY29uICAgICAgICAgaHR0cHM6Ly93d3cueW91dHViZS5jb20veXRzL2ltZy9mYXZpY29uLXZmbDhxU1YyRi5pY28KCgoKCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgLy8gWW91ciBjb2RlIGhlcmUuLgogICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsKICAgICAgICAkKCdoZWFkJykuYXBwZW5kKCc8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2ZvbnQtYXdlc29tZS80LjcuMC9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiPicpOwoKICAgICAgICAvL0FjZXNzZSBodHRwczovL3dpZ255LmdpdGh1Yi5pbwoKICAgICAgICAvL0FkZCBjbGlja2FibGUgaWNvbgogICAgICAgIGZ1bmN0aW9uIGFkZF9idG5fdXJsX2F0dWFsKCl7CiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG9wLXJvdycpOwogICAgICAgICAgICB2YXIgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgICAgICAgICAgIHZhciBodG1sID0gICc8ZGl2IGNsYXNzPSJidG5fbXAzIj4nKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxhIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwMDAwOyBib3JkZXI6IHNvbGlkIDJweCAjZmYwMDAwOyBib3JkZXItcmFkaXVzOiAycHg7IGNvbG9yOiB3aGl0ZTsgcGFkZGluZzogMHB4IDE1cHg7IGZvbnQtc2l6ZTogMTRweDsgY3Vyc29yOnBvaW50ZXI7IGhlaWdodDozM3B4O21hcmdpbi1yaWdodDogNHB4O21hcmdpbi10b3A6IDdweDtsaW5lLWhlaWdodDogMzNweDtmb250LXdlaWdodDogNTAwOyBkaXNwbGF5OmlubGluZS1ibG9jazsgdGV4dC1kZWNvcmF0aW9uOiBub25lOyIgdGl0bGU9IkRvd25sb2FkIG5vdyBpbiBNUDMgfCBZb3VUdWJlIERvd25sb2FkZXIgLSBCeSBXw61nbnkgQWxtZWlkYSIgY2xhc3M9ImxpbmtfbXAzIiBocmVmPSJodHRwczovL3NhdmV0b21wMy5jb20vJyt1cmwrJyI+JysKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRE9XTkxPQUQgPHNwYW4gc3R5bGU9ImNvbG9yOiNmZmNjY2M7Ij5NUDM8L3NwYW4+JysKICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2E+JysKICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicrCiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJidG5fbXA0Ij4nKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxhIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwMDAwOyBib3JkZXI6IHNvbGlkIDJweCAjZmYwMDAwOyBib3JkZXItcmFkaXVzOiAycHg7IGNvbG9yOiB3aGl0ZTsgcGFkZGluZzogMHB4IDE1cHg7IGZvbnQtc2l6ZTogMTRweDsgY3Vyc29yOnBvaW50ZXI7IGhlaWdodDozM3B4O21hcmdpbi1yaWdodDogNHB4O21hcmdpbi10b3A6IDdweDtsaW5lLWhlaWdodDogMzNweDtmb250LXdlaWdodDogNTAwOyBkaXNwbGF5OmlubGluZS1ibG9jazsgdGV4dC1kZWNvcmF0aW9uOiBub25lOyIgdGl0bGU9IkRvd25sb2FkIG5vdyBpbiBNUDQgfCBZb3VUdWJlIERvd25sb2FkZXIgLSBCeSBXw61nbnkgQWxtZWlkYSIgY2xhc3M9ImxpbmtfbXA0IiBocmVmPSJodHRwczovL3B0LnNhdmVmcm9tLm5ldC8jdXJsPScrdXJsKyciPicrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0RPV05MT0FEIDxzcGFuIHN0eWxlPSJjb2xvcjojZmZjY2NjOyI+TVA0PC9zcGFuPicrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9hPicrCiAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nOwogICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBodG1sKTsKICAgICAgICB9CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICBhZGRfYnRuX3VybF9hdHVhbCgpOwogICAgICAgIH0sMTAwMCk7CgogICAgICAgIC8vQnkgV8OtZ255IEFsbWVpZGEKCiAgICAgICAgLy9BbHRlcmEgbyBocmVmIGNvbmZvcm1lIGNsaXF1ZXMKICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjbGljb3UnKTsKICAgICAgICAgICAgJCgnLmxpbmtfbXAzJykuYXR0cignaHJlZicsJ2h0dHBzOi8vc2F2ZXRvbXAzLmNvbS8nK3dpbmRvdy5sb2NhdGlvbi5ocmVmKycnKTsKICAgICAgICAgICAgJCgnLmxpbmtfbXA0JykuYXR0cignaHJlZicsJ2h0dHBzOi8vcHQuc2F2ZWZyb20ubmV0LyN1cmw9Jyt3aW5kb3cubG9jYXRpb24uaHJlZisnJyk7CiAgICAgICAgfSkudHJpZ2dlcigpOwogICAgfSk7Cn0pKCk7"}]}
